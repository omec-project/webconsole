// SPDX-FileCopyrightText: 2021 Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0
// 

syntax = "proto3";
package sdcoreConfig;
option go_package = "./sdcoreConfig";

service ConfigService {
  rpc GetNetworkSlice(NetworkSliceRequest) returns (NetworkSliceResponse) {}
  rpc NetworkSliceSubscribe(NetworkSliceRequest) returns (stream NetworkSliceResponse) {}
}

enum Status {
  SUCCESS = 0;
  FAILURE = 1;
}

message PlmnId {
  string mcc = 1;
  string mnc = 2;
}

message NSSAI {
  string Sst = 1;
  string Sd = 2;
}

message QoS {
  int32  uplink = 1;
  int32  downlink = 2;
  string  trafficClass = 3;
}

message GNodeB {
  string      Name = 1;
  int32      Tac  = 2;
}

message UpfInfo {
  string      UpfName = 1; 
  uint32      UpfPort = 2;
}

message SiteInfo {
  string      SiteName = 1;
  repeated GNodeB      Gnb = 2;
  PlmnId      Plmn = 3;
  UpfInfo     Upf  = 4;
}

message AppInfo {
  string AppName = 1;
  uint32 Startport = 2;
  uint32 Endport = 3;
  uint32 Protocol = 4;
  string EndPoint = 5;
}

message NetworkSlice {
  string Name = 1;
  NSSAI Nssai = 2; 
  QoS   Qos   = 3;
  repeated DeviceGroup  DeviceGroup  = 4;
  SiteInfo Site = 5;
  repeated string DenyApps = 6;
  repeated string PermitApps = 7;
  repeated AppInfo AppInfo = 8;
  AppFilterRules AppFilters = 9;
}

message DeviceGroup {
  string Name = 1;
  IpDomain IpDomainDetails = 2;
  repeated string Imsi = 3;
}

message IpDomain {
  string Name = 1;
  string DnnName = 2;
  string UePool  = 3;
  string DnsPrimary = 4;
  int32 Mtu = 5;
  UeDnnQosInfo UeDnnQos = 6;
}

message UeDnnQosInfo {
  int64  DnnMbrUplink = 1;
  int64  DnnMbrDownlink  = 2;
  TrafficClassInfo TrafficClass  = 3;
}

message TrafficClassInfo {
  string Name = 1;
  int32  Qci  = 2;
  int32  Arp  = 3;
  int32  Pdb  = 4;
  int32  Pelr  = 5;
}

enum PccFlowDirection {
  DOWNLINK = 0;
  UPLINK = 1;
  BIDIRECTIONAL = 2;
  UNSPECIFIED = 3;
}

enum PccArpPc {
  NOT_PREEMPT = 0;
  MAY_PREEMPT = 1;
}

enum PccArpPv {
  NOT_PREEMPTABLE = 0;
  PREEMPTABLE = 1;
}

enum PccFlowTos {
  HOPOPT = 0;
  ICMP = 1;
  TCP = 6;
  UDP = 17;
}

enum PccFlowStatus {
  ENABLED_UPLINK = 0; 
  ENABLED_DOWNLINK = 1;
  ENABLED = 2;
  DISABLED = 3;
  REMOVED = 4;
}

message PccFlowInfo {
  string FlowDesc = 1;    //packet filters of the IP flow
  string TosTrafficClass = 2;
  PccFlowDirection FlowDir = 3;
  PccFlowStatus FlowStatus = 4;
}

message PccArp {
  int32 PL = 1;
  PccArpPc PC = 2;
  PccArpPv PV = 3;
}

message PccRuleQos {
  int32 Var5qi = 1;
  int32 MaxbrUl = 2;
  int32 MaxbrDl = 3;
  int32 GbrUl = 4;
  int32 GbrDl = 5;
  PccArp Arp = 6;
}



message PccRule {
  repeated PccFlowInfo FlowInfos = 1;  
  string RuleId = 2;                 //Name of Rule
  PccRuleQos Qos =3;
}

message AppFilterRules {
  repeated PccRule PccRuleBase = 1;
}

message NetworkSliceRequest {
  uint32  RestartCounter = 1;
  string  ClientId = 2;
  bool    ImsiRequested = 3;
}

message NetworkSliceResponse {
  uint32  RestartCounter = 1;
  repeated NetworkSlice NetworkSlice = 2;
  uint32  ConfigUpdated = 3;
}
